<?php

if(!class_exists('WP_List_Table')){
    require_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );
}

class kv_contacts_class extends WP_List_Table {     
    
   
    function __construct(){
        global $status, $page;                
        
        parent::__construct( array(
            'singular'  => 'contact',     //singular name of the listed records
            'plural'    => 'contacts',    //plural name of the listed records
            'ajax'      => true        //does this table support ajax?
        ) );
        
    }    
    
    function column_default($item, $column_name){
        switch($column_name){
            case 'id' :
  case	'user_name':
	case	'topic' :
	case	'subject'	:
	case	'time' :
	case	'message_status'	:
	 	return $item[ $column_name ];
      default:
            return print_r( $item, true ) ; //Show the whole array for troubleshooting purposes
        }
    }    
    
    function column_id($item){       
       
        $actions = array(
            'edit'      => sprintf('<a href="?page=%s&action=%s&msg=%s">Edit</a>',$_REQUEST['page'],'edit',$item['id']),
            'delete'    => sprintf('<a href="?page=%s&action=%s&msg=%s">Delete</a>',$_REQUEST['page'],'delete',$item['id']),
        );
              
        return sprintf('%1$s <span style="color:silver"></span>%2$s', $item['id'], $this->row_actions($actions)    );
    }
    
   
    function column_cb($item){
        return sprintf(
            '<input type="checkbox" name="%1$s[]" value="%2$s" />', $this->_args['singular'], $item['ID']);
    }
    
  
    function get_columns(){
        $columns = array(
            'cb'        => '<input type="checkbox" />', //Render a checkbox instead of text
          	'id' => 'ID', 
		'user_name'=>__('User Name'),
		'topic' => __('Topic'),
		'subject'	=> __('Subject'),		
		'time'  => __('Time'),	
		'message_status'	=> __('Status')	

        );
        return $columns;
    }
   
    function get_sortable_columns() {
        $sortable_columns = array(
            'id' => 'ID', 
		'user_name'=>__('User Name'),
		'topic' => __('Topic'),
		'message_status'	=> __('Status')	
        );
        return $sortable_columns;
    }    
    
    function get_bulk_actions() {
        $actions = array(       'delete'    => 'Delete'     );
        return $actions;
    }
    
    
    function process_bulk_action() {        
          if( 'delete'===$this->current_action() ) {
            wp_die('Items deleted (or they would be if we had items to delete)!');
        }        
    }    
   
    function prepare_items() {
        global $wpdb , $_wp_column_headers;  

        $per_page = 2;

        $database_name= $wpdb->prefix.'contact_message' ; //Your custom table name
        $query = "SELECT * FROM $database_name";
        
       $screen = get_current_screen();
        $columns = $this->get_columns();
        $hidden = array();
        $sortable = $this->get_sortable_columns(); 
        $this->_column_headers = array($columns, $hidden, $sortable);               
        $this->process_bulk_action();
        
        $data = $wpdb->get_results($query , ARRAY_A);                
        
        function usort_reorder($a,$b){
            $orderby = (!empty($_REQUEST['orderby'])) ? $_REQUEST['orderby'] : 'id'; //If no sort, default to title
            $order = (!empty($_REQUEST['order'])) ? $_REQUEST['order'] : 'asc'; //If no order, default to asc
            $result = strcmp($a[$orderby], $b[$orderby]); //Determine sort order
            return ($order==='asc') ? $result : -$result; //Send final sort direction to usort
        }
        usort($data, 'usort_reorder');        
        
        $current_page = $this->get_pagenum();
      
        $total_items = count($data);
       
        $data = array_slice($data,(($current_page-1)*$per_page),$per_page);        
       
        $this->items = $data;        
       
        $this->set_pagination_args( array(
            'total_items' => $total_items,                  //WE have to calculate the total number of items
            'per_page'    => $per_page,                     //WE have to determine how many items to show on a page
            'total_pages' => ceil($total_items/$per_page)   //WE have to calculate the total number of pages
        ) );
    }
    
}

function kv_contacts_admin_page(){

    $contact_msg = new kv_contacts_class();
 
    $contact_msg->prepare_items();    ?>

        <form id="movies-filter" method="get">
          
            <input type="hidden" name="page" value="<?php echo $_REQUEST['page'] ?>" />
           
            <?php $contact_msg->display() ?>
        </form>
    
    <?php
}
